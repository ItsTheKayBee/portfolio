@import "styles/variables";
@import "styles/utils";

// Carousel configuration parameters
$item-width: 40%; // Width of an image. In the Js version this value can be a percentage
$item-separation: 0; // The space between the images. This will decrease the effective item width
$viewer-distance: 500px;

$glow-offset: 10px;
$border-offset: 2px;

.arrowButton {
  border: none;
  background-color: transparent;
  cursor: pointer;
  z-index: 1;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  @media (max-width: 768px) {
    display: none;
  }
  &.left {
    left: 5%;
  }
  &.right {
    right: 5%;
  }
}

.canvas {
  position: absolute;
  top: 0;
  left: 0;
}

.skillsContainer {
  background: url("/images/skills.svg");
  background-position: center;
  background-size: cover;
  .carousel {
    padding: 20px;

    perspective: $viewer-distance;
    overflow: hidden;

    display: flex;
    flex-direction: column;
    align-items: center;
    > * {
      flex: 0 0 auto;
    }

    .skills {
      margin: 0;
      width: $item-width;
      transform-style: preserve-3d;
      transition: transform 1s ease-out;
      height: 400px;

      .skill {
        width: 100%;
        height: 100%;
        box-sizing: border-box;
        cursor: pointer;
        padding: 0 $item-separation / 2;
        padding: 20px;
        position: relative;
        &:not(:first-of-type) {
          position: absolute;
          left: 0;
          top: 0;
        }

        .skillImage {
          position: absolute;
          top: 50% !important;
          left: 50% !important;
          transform: translate(-50%, -50%);
          width: 30%;
        }
        .blob {
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          fill: white;
        }
        .border {
          position: absolute;
          top: -1 * $border-offset;
          left: -1 * $border-offset;
          width: calc(100% + 2 * $border-offset);
          height: calc(100% + 2 * $border-offset);
          fill: url(#gradient);
          z-index: -1;
        }
        .glow {
          width: 100%;
          height: 100%;
          z-index: -2;
          position: absolute;
          top: -1 * $glow-offset;
          left: -1 * $glow-offset;
          width: calc(100% + 2 * $glow-offset);
          height: calc(100% + 2 * $glow-offset);
          filter: blur(30px);
          fill: url(#gradient);
        }

        // .starsContainer {
        //   .starIcon,
        //   .halfStarIcon {
        //     height: 40px;
        //     width: 40px;
        //     fill: $star-color;
        //     transform-origin: center center;
        //   }
        //   $delay: 0s;
        //   @for $i from 1 to 4 {
        //     .starIcon:nth-child(#{$i}),
        //     .halfStarIcon {
        //       animation: starAnim-#{$i} 1s ease-out $delay infinite;
        //     }
        //     $delay: $delay + 0.1s;
        //   }
        // }
        &:hover {
          .starsContainer {
            $current-anim-time: 0.3s;
            $anim-time: 0.3s;
            @for $i from 1 to 4 {
              .starIcon:nth-child(#{$i}),
              .halfStarIcon {
                animation: fadeIn $current-anim-time cubic-bezier(0.455, 0.03, 0.515, 0.955);
              }
              $current-anim-time: $current-anim-time + $anim-time;
            }
          }
        }
      }
    }
  }
}

@for $i from 1 to 4 {
  @keyframes starAnim-#{$i} {
    0% {
      transform: translate(0) rotate(0);
    }
    25% {
      transform: translate(#{random(3)}px, -#{random(2)}px) rotateZ(#{random(10)}deg);
    }
    50% {
      transform: translate(-#{random(3)}px, #{random(2)}px) rotateZ(-#{random(10)}deg);
    }
    75% {
      transform: translate(#{random(3)}px, -#{random(2)}px) rotateZ(#{random(10)}deg);
    }
  }
}

@keyframes fadeIn {
  0% {
    opacity: 0;
    transform: scale(0);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes randomMotion {
  0% {
    top: #{rand(0, 100)}vh;
    left: #{rand(0, 100)}vw;
  }
  100% {
    top: #{rand(0, 100)}vh;
    left: #{rand(0, 100)}vw;
  }
}
